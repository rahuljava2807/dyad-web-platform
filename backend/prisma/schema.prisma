// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users and Authentication
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  avatarUrl     String?  @map("avatar_url")
  provider      String   @default("local") // 'local', 'azure', 'google', 'github'
  providerId    String?  @map("provider_id")
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  ownedOrganizations   OrganizationMember[]
  projects             Project[]
  aiGenerations        AiGeneration[]
  usageRecords         UsageRecord[]
  migrationSessions    MigrationSession[]
  apiKeys              APIKey[]

  @@map("users")
}

// Organizations and Teams
model Organization {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  plan         String   @default("starter") // 'starter', 'professional', 'enterprise'
  billingEmail String?  @map("billing_email")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  members      OrganizationMember[]
  projects     Project[]
  usageRecords UsageRecord[]

  @@map("organizations")
}

model OrganizationMember {
  id             String   @id @default(cuid())
  organizationId String   @map("organization_id")
  userId         String   @map("user_id")
  role           String   @default("member") // 'owner', 'admin', 'member'
  joinedAt       DateTime @default(now()) @map("joined_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("organization_members")
}

// Projects
model Project {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String?  @map("organization_id")
  ownerId        String   @map("owner_id")
  framework      String? // 'nextjs', 'react', 'vue', 'svelte'
  template       String?
  status         String   @default("active") // 'active', 'archived', 'deleted'
  settings       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  organization    Organization?   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  owner           User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  files           ProjectFile[]
  aiGenerations   AiGeneration[]
  yaviDocuments   YaviDocument[]
  knowledgeBases  KnowledgeBase[]

  @@map("projects")
}

// Project Files (Virtual File System)
model ProjectFile {
  id          String   @id @default(cuid())
  projectId   String   @map("project_id")
  path        String
  content     String?
  size        Int      @default(0)
  mimeType    String?  @map("mime_type")
  hash        String? // SHA-256 hash for change detection
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, path])
  @@map("project_files")
}

// AI Generations and Chat History
model AiGeneration {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  projectId   String?  @map("project_id")
  type        String // 'code_generation', 'chat', 'analysis'
  provider    String // 'openai', 'anthropic', 'google'
  model       String
  prompt      String
  response    String?
  tokensUsed  Int      @default(0) @map("tokens_used")
  cost        Decimal  @default(0) @db.Decimal(10, 6)
  durationMs  Int?     @map("duration_ms")
  status      String   @default("pending") // 'pending', 'completed', 'failed'
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ai_generations")
}

// Usage Tracking and Billing
model UsageRecord {
  id             String   @id @default(cuid())
  organizationId String?  @map("organization_id")
  userId         String   @map("user_id")
  type           String // 'ai_generation', 'storage', 'api_calls'
  quantity       Int
  cost           Decimal  @default(0) @db.Decimal(10, 6)
  metadata       Json     @default("{}")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  organization Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("usage_records")
}

// API Key Management
model APIKey {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  provider      String // 'openai', 'anthropic', 'google', 'azure'
  name          String
  encryptedKey  String   @map("encrypted_key")
  encryptionIv  String   @map("encryption_iv")
  encryptionTag String   @map("encryption_tag")
  isDefault     Boolean  @default(false) @map("is_default")
  isValid       Boolean  @default(true) @map("is_valid")
  tokensUsed    Int      @default(0) @map("tokens_used")
  costIncurred  Decimal  @default(0) @db.Decimal(10, 6) @map("cost_incurred")
  lastUsed      DateTime? @map("last_used")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, name])
  @@map("api_keys")
}

// Yavi.ai Integration
model YaviDocument {
  id              String   @id @default(cuid())
  projectId       String   @map("project_id")
  yaviDocumentId  String   @map("yavi_document_id")
  title           String?
  contentType     String?  @map("content_type")
  url             String?
  processedAt     DateTime? @map("processed_at")
  metadata        Json     @default("{}")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("yavi_documents")
}

model KnowledgeBase {
  id            String   @id @default(cuid())
  projectId     String   @map("project_id")
  yaviKbId      String   @map("yavi_kb_id")
  name          String
  description   String?
  status        String   @default("active")
  documentCount Int      @default(0) @map("document_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("knowledge_bases")
}

// Migration Support
model MigrationSession {
  id            String   @id @default(cuid())
  userEmail     String   @map("user_email")
  userId        String?  @map("user_id")
  desktopVersion String? @map("desktop_version")
  status        String   @default("pending") // 'pending', 'in_progress', 'completed', 'failed'
  progress      Int      @default(0) // 0-100
  currentStep   String?  @map("current_step")
  errorMessage  String?  @map("error_message")
  migrationData Json?    @map("migration_data") // Metadata about what's being migrated
  startedAt     DateTime @default(now()) @map("started_at")
  completedAt   DateTime? @map("completed_at")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("migration_sessions")
}

model MigrationMapping {
  id               String   @id @default(cuid())
  desktopUserId    String   @map("desktop_user_id")
  webUserId        String   @map("web_user_id")
  desktopProjectId String   @map("desktop_project_id")
  webProjectId     String   @map("web_project_id")
  sessionId        String   @map("migration_session_id")
  migratedAt       DateTime @default(now()) @map("migrated_at")

  @@unique([desktopUserId, desktopProjectId])
  @@map("migration_mappings")
}

model MigrationIssue {
  id         String   @id @default(cuid())
  sessionId  String   @map("session_id")
  issueType  String   @map("issue_type") // 'error', 'warning', 'info'
  component  String? // 'project', 'file', 'settings', etc.
  itemId     String?  @map("item_id") // ID of the item that had an issue
  message    String
  stackTrace String?  @map("stack_trace")
  resolved   Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("migration_issues")
}