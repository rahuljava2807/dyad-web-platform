'use client';

import React, { useState } from 'react';
import { YaviStudioLayout } from '@/components/layouts/YaviStudioLayout';
import { PromptInterface } from '@/components/Builder/PromptInterface';
import { FileTreeVisualizer } from '@/components/Builder/FileTreeVisualizer';
import { PreviewPanel } from '@/components/Builder/PreviewPanel';
import { useProjectStore, ProjectFile } from '@/store/projectStore';

export default function AppBuilderPage() {
  const { currentProject, updateProjectFiles, updateProjectStatus } = useProjectStore();
  const [generationStatus, setGenerationStatus] = useState<
    'idle' | 'generating' | 'reviewing' | 'approved'
  >('idle');
  const [generatedFiles, setGeneratedFiles] = useState<ProjectFile[]>([]);
  const [selectedFile, setSelectedFile] = useState<ProjectFile | undefined>();

  const handleGeneration = async (prompt: string, settings: any) => {
    setGenerationStatus('generating');
    setGeneratedFiles([]);

    try {
      // Simulate file generation with streaming
      // In production, this would be a Server-Sent Events connection
      const mockFiles: ProjectFile[] = [
        {
          path: '/src/app/page.tsx',
          content: `'use client';

import React from 'react';

export default function HomePage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-4xl font-bold text-gray-900 mb-4">
          ${settings.selectedIndustry ? settings.selectedIndustry.charAt(0).toUpperCase() + settings.selectedIndustry.slice(1) : 'Application'} Dashboard
        </h1>
        <p className="text-gray-600 mb-8">
          ${prompt}
        </p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          {/* Add your components here */}
        </div>
      </div>
    </div>
  );
}`,
          language: 'typescript',
          isNew: true
        },
        {
          path: '/src/components/Dashboard.tsx',
          content: `'use client';

import React from 'react';

export const Dashboard: React.FC = () => {
  return (
    <div className="p-6 bg-white rounded-lg shadow-sm border border-gray-200">
      <h2 className="text-2xl font-semibold mb-4">Dashboard Component</h2>
      <p className="text-gray-600">
        This component was generated based on your requirements.
      </p>
    </div>
  );
};`,
          language: 'typescript',
          isNew: true
        },
        {
          path: '/package.json',
          content: `{
  "name": "${settings.selectedIndustry || 'yavi'}-application",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "next": "^14.2.15"
  }
}`,
          language: 'json',
          isNew: true
        },
        {
          path: '/README.md',
          content: `# ${settings.selectedIndustry ? settings.selectedIndustry.charAt(0).toUpperCase() + settings.selectedIndustry.slice(1) : 'Generated'} Application

## Description
${prompt}

## Features
- Document intelligence powered by Yavi.ai
- Modern React/Next.js architecture
- Tailwind CSS styling
- TypeScript support

## Getting Started

\`\`\`bash
npm install
npm run dev
\`\`\`

Open [http://localhost:3000](http://localhost:3000) to view the application.

## Generated by Yavi Studio
This application was generated by Yavi Studio, powered by Nimbusnext Inc.
`,
          language: 'markdown',
          isNew: true
        },
        {
          path: '/tailwind.config.ts',
          content: `import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

export default config`,
          language: 'typescript',
          isNew: true
        }
      ];

      // Simulate streaming generation
      for (let i = 0; i < mockFiles.length; i++) {
        await new Promise((resolve) => setTimeout(resolve, 800));
        setGeneratedFiles((prev) => [...prev, mockFiles[i]]);
      }

      setGenerationStatus('reviewing');

      // Update project if one is selected
      if (currentProject) {
        updateProjectFiles(currentProject.id, mockFiles);
        updateProjectStatus(currentProject.id, 'generated');
      }
    } catch (error) {
      console.error('Generation error:', error);
      setGenerationStatus('idle');
    }
  };

  const handleApprove = () => {
    setGenerationStatus('approved');
    if (currentProject) {
      updateProjectStatus(currentProject.id, 'deployed');
    }
  };

  const handleReject = () => {
    setGenerationStatus('idle');
    setGeneratedFiles([]);
    setSelectedFile(undefined);
  };

  return (
    <YaviStudioLayout>
      <div className="h-[calc(100vh-64px)] flex">
        {/* Left Panel - Prompt and Controls */}
        <div className="w-1/3 border-r border-gray-200">
          <PromptInterface onGenerate={handleGeneration} status={generationStatus} />
        </div>

        {/* Center Panel - File Tree */}
        <div className="w-1/3 border-r border-gray-200">
          <FileTreeVisualizer
            files={generatedFiles}
            status={generationStatus}
            onFileSelect={setSelectedFile}
            selectedFile={selectedFile}
          />
        </div>

        {/* Right Panel - Preview */}
        <div className="w-1/3">
          <PreviewPanel
            files={generatedFiles}
            status={generationStatus}
            selectedFile={selectedFile}
            onApprove={handleApprove}
            onReject={handleReject}
          />
        </div>
      </div>
    </YaviStudioLayout>
  );
}
