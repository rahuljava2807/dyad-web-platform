{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "description": "ARM Template for Dyad Web Platform infrastructure on Azure",
    "author": "Nimbusnext Inc"
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "production",
      "allowedValues": [
        "development",
        "staging",
        "production"
      ],
      "metadata": {
        "description": "Environment name"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "frontendAppName": {
      "type": "string",
      "defaultValue": "[concat('app-dyad-frontend-', parameters('environment'))]",
      "metadata": {
        "description": "Name of the frontend App Service"
      }
    },
    "backendAppName": {
      "type": "string",
      "defaultValue": "[concat('app-dyad-backend-', parameters('environment'))]",
      "metadata": {
        "description": "Name of the backend App Service"
      }
    },
    "databaseServerName": {
      "type": "string",
      "defaultValue": "[concat('sql-dyad-', parameters('environment'), '-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the PostgreSQL server"
      }
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "dyad_platform",
      "metadata": {
        "description": "Name of the database"
      }
    },
    "databaseAdminUsername": {
      "type": "string",
      "defaultValue": "dyad_admin",
      "metadata": {
        "description": "Administrator username for the database"
      }
    },
    "databaseAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the database"
      }
    },
    "redisName": {
      "type": "string",
      "defaultValue": "[concat('redis-dyad-', parameters('environment'), '-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Redis cache"
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "[concat('stdyad', parameters('environment'), uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the storage account"
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "[concat('crdyad', parameters('environment'), uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the container registry"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[concat('kv-dyad-', parameters('environment'), '-', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Key Vault"
      }
    },
    "appInsightsName": {
      "type": "string",
      "defaultValue": "[concat('ai-dyad-', parameters('environment'))]",
      "metadata": {
        "description": "Name of Application Insights"
      }
    },
    "logAnalyticsWorkspaceName": {
      "type": "string",
      "defaultValue": "[concat('log-dyad-', parameters('environment'))]",
      "metadata": {
        "description": "Name of Log Analytics Workspace"
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "[if(equals(parameters('environment'), 'production'), 'P1V2', 'B1')]",
      "allowedValues": [
        "B1",
        "B2",
        "B3",
        "S1",
        "S2",
        "S3",
        "P1V2",
        "P2V2",
        "P3V2"
      ],
      "metadata": {
        "description": "SKU for App Service Plan"
      }
    }
  },
  "variables": {
    "appServicePlanName": "[concat('plan-dyad-', parameters('environment'))]",
    "tags": {
      "Environment": "[parameters('environment')]",
      "Application": "Dyad Web Platform",
      "Owner": "Nimbusnext Inc",
      "CostCenter": "Engineering",
      "Project": "Yavi.ai Platform"
    }
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2021-06-01",
      "name": "[parameters('logAnalyticsWorkspaceName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": "[if(equals(parameters('environment'), 'production'), 90, 30)]",
        "features": {
          "enableLogAccessUsingOnlyResourcePermissions": true
        }
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('appInsightsName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "kind": "web",
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      ],
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2021-11-01-preview",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enabledForDeployment": false,
        "enabledForDiskEncryption": false,
        "enabledForTemplateDeployment": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90,
        "enableRbacAuthorization": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-09-01",
      "name": "[parameters('storageAccountName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "defaultToOAuthAuthentication": false,
        "allowCrossTenantReplication": false,
        "minimumTlsVersion": "TLS1_2",
        "allowBlobPublicAccess": true,
        "allowSharedKeyAccess": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
      ],
      "properties": {
        "cors": {
          "corsRules": [
            {
              "allowedOrigins": [
                "*"
              ],
              "allowedMethods": [
                "GET",
                "HEAD",
                "POST",
                "PUT",
                "DELETE"
              ],
              "maxAgeInSeconds": 3600,
              "exposedHeaders": [
                "*"
              ],
              "allowedHeaders": [
                "*"
              ]
            }
          ]
        },
        "deleteRetentionPolicy": {
          "enabled": true,
          "days": "[if(equals(parameters('environment'), 'production'), 30, 7)]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-09-01",
      "name": "[concat(parameters('storageAccountName'), '/default/dyad-files')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), 'default')]"
      ],
      "properties": {
        "publicAccess": "Blob"
      }
    },
    {
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2021-09-01",
      "name": "[parameters('containerRegistryName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[if(equals(parameters('environment'), 'production'), 'Standard', 'Basic')]"
      },
      "properties": {
        "adminUserEnabled": true,
        "policies": {
          "quarantinePolicy": {
            "status": "disabled"
          },
          "trustPolicy": {
            "type": "Notary",
            "status": "disabled"
          },
          "retentionPolicy": {
            "days": "[if(equals(parameters('environment'), 'production'), 30, 7)]",
            "status": "enabled"
          }
        },
        "encryption": {
          "status": "disabled"
        },
        "dataEndpointEnabled": false,
        "publicNetworkAccess": "Enabled",
        "networkRuleBypassOptions": "AzureServices"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers",
      "apiVersion": "2021-06-01",
      "name": "[parameters('databaseServerName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[if(equals(parameters('environment'), 'production'), 'Standard_D2s_v3', 'Standard_B1ms')]",
        "tier": "[if(equals(parameters('environment'), 'production'), 'GeneralPurpose', 'Burstable')]"
      },
      "properties": {
        "administratorLogin": "[parameters('databaseAdminUsername')]",
        "administratorLoginPassword": "[parameters('databaseAdminPassword')]",
        "version": "14",
        "storage": {
          "storageSizeGB": "[if(equals(parameters('environment'), 'production'), 128, 32)]"
        },
        "backup": {
          "backupRetentionDays": "[if(equals(parameters('environment'), 'production'), 35, 7)]",
          "geoRedundantBackup": "[if(equals(parameters('environment'), 'production'), 'Enabled', 'Disabled')]"
        },
        "highAvailability": {
          "mode": "[if(equals(parameters('environment'), 'production'), 'ZoneRedundant', 'Disabled')]"
        },
        "maintenanceWindow": {
          "customWindow": "Enabled",
          "dayOfWeek": 0,
          "startHour": 2,
          "startMinute": 0
        }
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/databases",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('databaseServerName'), '/', parameters('databaseName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseServerName'))]"
      ],
      "properties": {
        "charset": "utf8",
        "collation": "en_US.utf8"
      }
    },
    {
      "type": "Microsoft.DBforPostgreSQL/flexibleServers/firewallRules",
      "apiVersion": "2021-06-01",
      "name": "[concat(parameters('databaseServerName'), '/AllowAzureServices')]",
      "dependsOn": [
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseServerName'))]"
      ],
      "properties": {
        "startIpAddress": "0.0.0.0",
        "endIpAddress": "0.0.0.0"
      }
    },
    {
      "type": "Microsoft.Cache/redis",
      "apiVersion": "2021-06-01",
      "name": "[parameters('redisName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "properties": {
        "sku": {
          "name": "[if(equals(parameters('environment'), 'production'), 'Standard', 'Basic')]",
          "family": "C",
          "capacity": "[if(equals(parameters('environment'), 'production'), 1, 0)]"
        },
        "enableNonSslPort": false,
        "minimumTlsVersion": "1.2",
        "redisConfiguration": {
          "maxmemory-reserved": "[if(equals(parameters('environment'), 'production'), '50', '10')]",
          "maxmemory-delta": "[if(equals(parameters('environment'), 'production'), '50', '10')]"
        }
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-03-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "sku": {
        "name": "[parameters('sku')]"
      },
      "kind": "linux",
      "properties": {
        "reserved": true
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[parameters('frontendAppName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]"
      ],
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOCKER|nginx:alpine",
          "alwaysOn": "[if(equals(parameters('environment'), 'production'), true, false)]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).ConnectionString]"
            }
          ]
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      }
    },
    {
      "type": "Microsoft.Web/sites/slots",
      "apiVersion": "2021-03-01",
      "name": "[concat(parameters('frontendAppName'), '/staging')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('frontendAppName'))]"
      ],
      "condition": "[equals(parameters('environment'), 'production')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOCKER|nginx:alpine",
          "alwaysOn": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-03-01",
      "name": "[parameters('backendAppName')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Insights/components', parameters('appInsightsName'))]",
        "[resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseServerName'))]",
        "[resourceId('Microsoft.Cache/redis', parameters('redisName'))]"
      ],
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOCKER|node:20-alpine",
          "alwaysOn": "[if(equals(parameters('environment'), 'production'), true, false)]",
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "appSettings": [
            {
              "name": "WEBSITES_ENABLE_APP_SERVICE_STORAGE",
              "value": "false"
            },
            {
              "name": "NODE_ENV",
              "value": "[parameters('environment')]"
            },
            {
              "name": "DATABASE_URL",
              "value": "[concat('postgresql://', parameters('databaseAdminUsername'), ':', parameters('databaseAdminPassword'), '@', reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseServerName'))).fullyQualifiedDomainName, ':5432/', parameters('databaseName'))]"
            },
            {
              "name": "REDIS_URL",
              "value": "[concat('redis://', reference(resourceId('Microsoft.Cache/redis', parameters('redisName'))).hostName, ':6380?password=', listKeys(resourceId('Microsoft.Cache/redis', parameters('redisName')), '2021-06-01').primaryKey, '&ssl=true')]"
            },
            {
              "name": "AZURE_STORAGE_CONNECTION_STRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-09-01').keys[0].value, ';EndpointSuffix=core.windows.net')]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('appInsightsName'))).ConnectionString]"
            }
          ]
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      }
    },
    {
      "type": "Microsoft.Web/sites/slots",
      "apiVersion": "2021-03-01",
      "name": "[concat(parameters('backendAppName'), '/staging')]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('backendAppName'))]"
      ],
      "condition": "[equals(parameters('environment'), 'production')]",
      "kind": "app,linux,container",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "linuxFxVersion": "DOCKER|node:20-alpine",
          "alwaysOn": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true,
        "clientAffinityEnabled": false
      }
    }
  ],
  "outputs": {
    "frontendUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('frontendAppName'))).defaultHostName)]"
    },
    "backendUrl": {
      "type": "string",
      "value": "[concat('https://', reference(resourceId('Microsoft.Web/sites', parameters('backendAppName'))).defaultHostName)]"
    },
    "databaseHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.DBforPostgreSQL/flexibleServers', parameters('databaseServerName'))).fullyQualifiedDomainName]"
    },
    "redisHost": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Cache/redis', parameters('redisName'))).hostName]"
    },
    "storageAccountName": {
      "type": "string",
      "value": "[parameters('storageAccountName')]"
    },
    "containerRegistryName": {
      "type": "string",
      "value": "[parameters('containerRegistryName')]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('keyVaultName')]"
    },
    "appInsightsName": {
      "type": "string",
      "value": "[parameters('appInsightsName')]"
    }
  }
}